<style>
    .createButtons {
        padding-top: 20px;
    }
</style>

<h2>Add New Employee</h2>

<div id="createEmployeeForm">
    <div class="form-group">
        <label for="FirstName">First Name:</label>
        <input type="text" class="form-control" id="FirstName" name="FirstName">
    </div>

    <div class="form-group">
        <label for="LastName">Last Name:</label>
        <input type="text" class="form-control" id="LastName" name="LastName">
    </div>

    <div class="form-group">
        <label for="DateOfBirth">Date of Birth:</label>
        <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth">
    </div>

    <div class="form-group">
        <label for="Salary">Salary:</label>
        <input type="number" class="form-control" id="Salary" name="Salary">
    </div>

    <div class="form-group">
        <label for="PhotoBase64">Photo:</label>
        <input type="file" class="form-control" id="PhotoBase64" name="photo">
    </div>

    <div class="form-group">
        <label>Gender:</label>
        <div class="form-check">
            <input type="radio" class="form-check-input" id="GenderMale" name="Gender" value="Male" checked>
            <label class="form-check-label" for="GenderMale">Male</label>
        </div>
        <div class="form-check">
            <input type="radio" class="form-check-input" id="GenderFemale" name="Gender" value="Female">
            <label class="form-check-label" for="GenderFemale">Female</label>
        </div>
        <div class="form-check">
            <input type="radio" class="form-check-input" id="GenderOther" name="Gender" value="Other">
            <label class="form-check-label" for="GenderOther">Other</label>
        </div>
    </div>

    <div class="form-group">
        <label>Hobbies:</label>

        <label><input type="checkbox" name="Hobbies" value="Reading"> Reading</label>
        <label><input type="checkbox" name="Hobbies" value="Sports"> Sports</label>
        <label><input type="checkbox" name="Hobbies" value="Music"> Music</label>
        <label><input type="checkbox" name="Hobbies" value="Painting"> Painting</label>
        <label><input type="checkbox" name="Hobbies" value="Dance"> Dance</label>
        <label><input type="checkbox" name="Hobbies" value="Photography"> Photography</label>
        <label><input type="checkbox" name="Hobbies" value="Gaming"> Gaming</label>
    </div>


    <div class="form-group">
        <label for="ActiveStatus">Active Status:</label>
        <select class="form-control" id="ActiveStatus" name="ActiveStatus">
            <option value="Active">Active</option>
            <option value="Inactive" selected>Inactive</option>
        </select>
    </div>

    <div class="createButtons">
        <button type="button" class="btn btn-primary" id="saveButton">Save</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#saveButton').click(function () {
                var firstName = $('#FirstName').val();
                var lastName = $('#LastName').val();
                var dateOfBirth = $('#DateOfBirth').val();
                var salary = $('#Salary').val();
                var gender = $('input[name="Gender"]:checked').val();
                var hobbies = [];
                $('input[name="Hobbies"]:checked').each(function () {
                    hobbies.push($(this).val());
                });
                var ActiveStatus = $('#ActiveStatus').val();

                var fileInput = document.getElementById('PhotoBase64');
                  

                if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                    var reader = new FileReader();
                    reader.onload = function () {
                    var photoBase64 = reader.result;

                    var employee = {
                        FirstName: firstName,
                        LastName: lastName,
                        DateOfBirth: dateOfBirth,
                        Salary: salary,
                        PhotoBase64: photoBase64,
                        Gender: gender,
                        Hobbies: hobbies,
                        ActiveStatus: ActiveStatus
                    };

                    $.ajax({
                        url: '@Url.Action("Add")',
                        type: 'POST',
                        data: employee,
                        success: function (result) {
                            if (result.success) {
                                window.location.href = '@Url.Action("Index")';
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('An error occurred while updating the employee: ' + error);
                        }
                    });
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                } else {

                    var employee = {
                        FirstName: firstName,
                        LastName: lastName,
                        DateOfBirth: dateOfBirth,
                        Salary: salary,
                        PhotoBase64: null,
                        Gender: gender,
                        Hobbies: hobbies,
                        ActiveStatus: ActiveStatus
                    };

                    $.ajax({
                        url: '@Url.Action("Add")',
                        type: 'POST',
                        data: employee,
                        success: function (result) {
                            if (result.success) {
                                window.location.href = '@Url.Action("Index")';
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('An error occurred while updating the employee: ' + error);
                        }
                    });
                }

                //var reader = new FileReader();
                //reader.onload = function () {
                //    var photoBase64 = reader.result;

                //    var employee = {
                //        FirstName: firstName,
                //        LastName: lastName,
                //        DateOfBirth: dateOfBirth,
                //        Salary: salary,
                //        PhotoBase64: photoBase64,
                //        Gender: gender,
                //        Hobbies: hobbies,
                //        ActiveStatus: ActiveStatus
                //    };

                //    $.ajax({
                //        url: '@Url.Action("Add")',
                //        type: 'POST',
                //        data: employee,
                //        success: function (result) {
                //            if (result.success) {
                //                window.location.href = '@Url.Action("Index")';
                //            } else {
                //                alert(result.message);
                //            }
                //        },
                //        error: function (xhr, status, error) {
                //            alert('An error occurred while adding the employee: ' + error);
                //        }
                //    });
                //};
                //reader.readAsDataURL(photo);
            });
        });
    </script>
}


@*@model ClientSide.Models.Employee

<h2>Create Employee</h2>

@using (Html.BeginForm("Add", "Employee", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div>
        <label for="FirstName">First Name:</label>
        @Html.TextBoxFor(model => model.FirstName)
    </div>
    <div>
        <label for="LastName">Last Name:</label>
        @Html.TextBoxFor(model => model.LastName)
    </div>
    <div>
        <label for="DateOfBirth">Date of Birth:</label>
        @Html.TextBoxFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { type = "date" })
    </div>
    <div>
        <label for="Salary">Salary:</label>
        @Html.TextBoxFor(model => model.Salary)
    </div>
    <div>
        <label for="Photo">Photo:</label>
        <input type="file" id="PhotoUpload" accept="image/*">
        @Html.HiddenFor(model => model.PhotoBase64)
    </div>
    <div>
        <label for="Gender">Gender:</label><br>
        @Html.RadioButtonFor(model => model.Gender, "Male") Male
        @Html.RadioButtonFor(model => model.Gender, "Female") Female
        @Html.RadioButtonFor(model => model.Gender, "Other") Other
        </div>

   <div>
            <label>Hobbies:</label>

        <label><input type="checkbox" name="Hobbies" value="Reading"> Reading</label>
        <label><input type="checkbox" name="Hobbies" value="Sports"> Sports</label>
        <label><input type="checkbox" name="Hobbies" value="Music"> Music</label>
        <label><input type="checkbox" name="Hobbies" value="Painting"> Painting</label>
        <label><input type="checkbox" name="Hobbies" value="Dance"> Dance</label>
        <label><input type="checkbox" name="Hobbies" value="Photography"> Photography</label>
        <label><input type="checkbox" name="Hobbies" value="Gaming"> Gaming</label>
        @Html.HiddenFor(model => model.Hobbies, new { id = "Hobbies" })
</div>

    <div>
        <label for="ActiveStatus">Active Status:</label>
        @Html.DropDownListFor(model => model.ActiveStatus, new List<SelectListItem>
        {
            new SelectListItem { Text = "Active", Value = "Active" },
            new SelectListItem { Text = "Inactive", Value = "Inactive" }
        }, "Select")
    </div>

    <input type="submit" value="Add" />
}

<button onclick="goBack()">Back</button>

<script>
    document.getElementById('PhotoUpload').addEventListener('change', function () {
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
            document.getElementById('PhotoBase64').value = e.target.result;
        };
        fileReader.readAsDataURL(this.files[0]);
    });

  
    function updateSelectedHobbies() {
        var checkboxes = document.querySelectorAll('input[name="Hobbies"]:checked');
        var selectedHobbies = Array.from(checkboxes).map(function (checkbox) {
            return checkbox.value;
        }).join(',');

        document.getElementById('Hobbies').value = selectedHobbies;
    }

    // Update selected hobbies when a checkbox is changed
    var hobbyCheckboxes = document.querySelectorAll('input[name="Hobbies"]');
    hobbyCheckboxes.forEach(function (checkbox) {
        checkbox.addEventListener('change', updateSelectedHobbies);
    });

    // Call updateSelectedHobbies initially to populate the hidden field
    updateSelectedHobbies();



    function goBack() {
        window.history.back();
    }
</script>
*@




